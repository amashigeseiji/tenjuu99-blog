#!/usr/bin/env node

import { spawn } from 'child_process'
import { srcDir, watch as watchDir, packageDir, packageDirCore } from '../lib/dir.js'
import { watchers, watch } from '../lib/watcher.js'
import path from 'path'
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const libDir = path.dirname(__filename) + '/../lib/'
const binDir = path.dirname(__filename) + '/../bin/'

watchers.push({
  paths: [srcDir, libDir, packageDirCore],
  event: ['change', 'add', 'unlink'],
  callback: async (path) => {
    childProcess.kill('SIGINT')
    childProcess = proceed()
    console.error('restarting')
  },
  watchOptions: {
    ignoreInitial: true
  }
})
watch()

/**
 * @type { import("child_process").ChildProcess }
 * @var {ChildProcess} childProcess
 */
let childProcess = null

const proceed = () => {
  const child = spawn('node', [`${binDir}server`])
  console.log(`start process. PID(parent): ${process.pid}, PID(child): ${child.pid}`)

  child.stdout.on('data', (data) => {
    console.log(data.toString().split('\n').filter(v => v).join('\n'))
  })
  child.stderr.on('data', (data) => {
    console.log(data.toString().split('\n').filter(v => v).join('\n'))
  })
  child.on('exit', (code, signal) => {
    console.error(`process exit: ${code}, SIGNAL: ${signal}`);
    child.kill('SIGINT')
  })

  return child
}

childProcess = proceed()

process.on('exit', () => {
  childProcess.kill('SIGINT')
})
